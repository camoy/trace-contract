;; Makes an efficient contract for monotonicity.
(define (make-transfer-fold/c folder)
  (trace/c ([self any/c] [ℓ any/c] [x any/c] [y any/c])
    (-> self ℓ x y)
    (accumulate (hash)
      [(self ℓ x y) folder])))

;; Determines if the trace represents a monotonic function.
(define (transfer-fold acc self ℓ x y)
  (match-define (list xt yt) (hash-ref acc ℓ '(() ())))
  (define xs (cons x xt))
  (define ys (cons y yt))
  (if (monotone? (send self L) xs ys)
      (hash-set acc ℓ (list xs ys))
      (fail)))

;; Returns if the given input and output lists represent a transfer function.
(define (monotone? L x y)
  (with-method ([⊑ (L ⊑)])
    (for*/and ([(x1 y1) (in-parallel x y)]
               [(x2 y2) (in-parallel x y)])
      (implies (⊑ x1 x2) (⊑ y1 y2)))))
